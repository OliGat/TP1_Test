document.querySelector('mutation-test-report-app').report = {"files":{"/var/www/tp-jest/src/interval.js":{"language":"javascript","mutants":[{"id":"1","location":{"end":{"column":6,"line":9},"start":{"column":16,"line":7}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"0","location":{"end":{"column":6,"line":5},"start":{"column":29,"line":2}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"4","location":{"end":{"column":38,"line":8},"start":{"column":16,"line":8}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start - \",\"","status":"Killed"},{"id":"5","location":{"end":{"column":32,"line":8},"start":{"column":16,"line":8}},"mutatorName":"BinaryExpression","replacement":"\"[\" - this.start","status":"Killed"},{"id":"8","location":{"end":{"column":55,"line":8},"start":{"column":52,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"2","location":{"end":{"column":55,"line":8},"start":{"column":16,"line":8}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start + \",\" + this.end - \"]\"","status":"Killed"},{"id":"9","location":{"end":{"column":6,"line":27},"start":{"column":24,"line":25}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"3","location":{"end":{"column":49,"line":8},"start":{"column":16,"line":8}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start + \",\" - this.end","status":"Killed"},{"id":"10","location":{"end":{"column":70,"line":26},"start":{"column":16,"line":26}},"mutatorName":"BinaryExpression","replacement":"this.end > interval.start || this.start < interval.end","status":"Killed"},{"id":"11","location":{"end":{"column":70,"line":26},"start":{"column":16,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"12","location":{"end":{"column":70,"line":26},"start":{"column":16,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"15","location":{"end":{"column":41,"line":26},"start":{"column":16,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"16","location":{"end":{"column":41,"line":26},"start":{"column":16,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"17","location":{"end":{"column":70,"line":26},"start":{"column":45,"line":26}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.end","status":"Survived"},{"id":"18","location":{"end":{"column":70,"line":26},"start":{"column":45,"line":26}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.end","status":"Killed"},{"id":"7","location":{"end":{"column":38,"line":8},"start":{"column":35,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"6","location":{"end":{"column":19,"line":8},"start":{"column":16,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"20","location":{"end":{"column":70,"line":26},"start":{"column":45,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"19","location":{"end":{"column":70,"line":26},"start":{"column":45,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"21","location":{"end":{"column":6,"line":47},"start":{"column":24,"line":45}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":128,"line":46},"start":{"column":16,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.start < interval.start && this.start < interval.end && this.end > interval.start || this.end > interval.end","status":"Killed"},{"id":"25","location":{"end":{"column":101,"line":46},"start":{"column":16,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.start < interval.start && this.start < interval.end || this.end > interval.start","status":"Killed"},{"id":"23","location":{"end":{"column":128,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"24","location":{"end":{"column":128,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"26","location":{"end":{"column":101,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"27","location":{"end":{"column":101,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"28","location":{"end":{"column":72,"line":46},"start":{"column":16,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.start < interval.start || this.start < interval.end","status":"Killed"},{"id":"29","location":{"end":{"column":72,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"30","location":{"end":{"column":72,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"13","location":{"end":{"column":41,"line":26},"start":{"column":16,"line":26}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.start","status":"Survived"},{"id":"32","location":{"end":{"column":43,"line":46},"start":{"column":16,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.start","status":"Killed"},{"id":"33","location":{"end":{"column":43,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"34","location":{"end":{"column":43,"line":46},"start":{"column":16,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"31","location":{"end":{"column":43,"line":46},"start":{"column":16,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.start","status":"Killed"},{"id":"14","location":{"end":{"column":41,"line":26},"start":{"column":16,"line":26}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.start","status":"Killed"},{"id":"35","location":{"end":{"column":72,"line":46},"start":{"column":47,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.end","status":"Survived"},{"id":"37","location":{"end":{"column":72,"line":46},"start":{"column":47,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"38","location":{"end":{"column":72,"line":46},"start":{"column":47,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"39","location":{"end":{"column":101,"line":46},"start":{"column":76,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.start","status":"Survived"},{"id":"40","location":{"end":{"column":101,"line":46},"start":{"column":76,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.start","status":"Killed"},{"id":"36","location":{"end":{"column":72,"line":46},"start":{"column":47,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.end","status":"Killed"},{"id":"41","location":{"end":{"column":101,"line":46},"start":{"column":76,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"42","location":{"end":{"column":101,"line":46},"start":{"column":76,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"43","location":{"end":{"column":128,"line":46},"start":{"column":105,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.end","status":"Survived"},{"id":"46","location":{"end":{"column":128,"line":46},"start":{"column":105,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"45","location":{"end":{"column":128,"line":46},"start":{"column":105,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"48","location":{"end":{"column":35,"line":67},"start":{"column":12,"line":67}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"47","location":{"end":{"column":6,"line":81},"start":{"column":21,"line":65}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"44","location":{"end":{"column":128,"line":46},"start":{"column":105,"line":46}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.end","status":"Killed"},{"id":"49","location":{"end":{"column":35,"line":67},"start":{"column":12,"line":67}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"51","location":{"end":{"column":63,"line":68},"start":{"column":36,"line":68}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.start","status":"Survived"},{"id":"50","location":{"end":{"column":10,"line":71},"start":{"column":36,"line":67}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"52","location":{"end":{"column":63,"line":68},"start":{"column":36,"line":68}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.start","status":"Killed"},{"id":"54","location":{"end":{"column":63,"line":68},"start":{"column":36,"line":68}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"53","location":{"end":{"column":63,"line":68},"start":{"column":36,"line":68}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"55","location":{"end":{"column":57,"line":69},"start":{"column":34,"line":69}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.end","status":"Survived"},{"id":"56","location":{"end":{"column":57,"line":69},"start":{"column":34,"line":69}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.end","status":"Killed"},{"id":"57","location":{"end":{"column":57,"line":69},"start":{"column":34,"line":69}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"58","location":{"end":{"column":57,"line":69},"start":{"column":34,"line":69}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"59","location":{"end":{"column":10,"line":79},"start":{"column":15,"line":71}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"63","location":{"end":{"column":41,"line":72},"start":{"column":16,"line":72}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.start","status":"Killed"},{"id":"61","location":{"end":{"column":41,"line":72},"start":{"column":16,"line":72}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"62","location":{"end":{"column":41,"line":72},"start":{"column":16,"line":72}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.start","status":"Survived"},{"id":"65","location":{"end":{"column":14,"line":78},"start":{"column":20,"line":75}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"64","location":{"end":{"column":14,"line":75},"start":{"column":43,"line":72}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"60","location":{"end":{"column":41,"line":72},"start":{"column":16,"line":72}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"66","location":{"end":{"column":6,"line":114},"start":{"column":28,"line":99}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"68","location":{"end":{"column":42,"line":100},"start":{"column":12,"line":100}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"67","location":{"end":{"column":42,"line":100},"start":{"column":12,"line":100}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"69","location":{"end":{"column":42,"line":100},"start":{"column":12,"line":100}},"mutatorName":"BinaryExpression","replacement":"typeof interval != \"undefined\"","status":"Killed"},{"id":"70","location":{"end":{"column":42,"line":100},"start":{"column":31,"line":100}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"72","location":{"end":{"column":56,"line":101},"start":{"column":19,"line":101}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"71","location":{"end":{"column":10,"line":102},"start":{"column":43,"line":100}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"74","location":{"end":{"column":39,"line":103},"start":{"column":12,"line":103}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"73","location":{"end":{"column":39,"line":103},"start":{"column":12,"line":103}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"75","location":{"end":{"column":39,"line":103},"start":{"column":12,"line":103}},"mutatorName":"BinaryExpression","replacement":"interval.start >= interval.end","status":"Survived"},{"id":"77","location":{"end":{"column":10,"line":105},"start":{"column":40,"line":103}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"76","location":{"end":{"column":39,"line":103},"start":{"column":12,"line":103}},"mutatorName":"BinaryExpression","replacement":"interval.start <= interval.end","status":"Killed"},{"id":"79","location":{"end":{"column":35,"line":108},"start":{"column":12,"line":108}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"78","location":{"end":{"column":59,"line":104},"start":{"column":19,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"81","location":{"end":{"column":10,"line":112},"start":{"column":36,"line":108}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"80","location":{"end":{"column":35,"line":108},"start":{"column":12,"line":108}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"82","location":{"end":{"column":6,"line":159},"start":{"column":25,"line":132}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"83","location":{"end":{"column":42,"line":134},"start":{"column":12,"line":134}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"85","location":{"end":{"column":42,"line":134},"start":{"column":12,"line":134}},"mutatorName":"BinaryExpression","replacement":"typeof interval != \"undefined\"","status":"Killed"},{"id":"84","location":{"end":{"column":42,"line":134},"start":{"column":12,"line":134}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"87","location":{"end":{"column":10,"line":136},"start":{"column":43,"line":134}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"86","location":{"end":{"column":42,"line":134},"start":{"column":31,"line":134}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"88","location":{"end":{"column":56,"line":135},"start":{"column":19,"line":135}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"90","location":{"end":{"column":39,"line":137},"start":{"column":12,"line":137}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"89","location":{"end":{"column":39,"line":137},"start":{"column":12,"line":137}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"91","location":{"end":{"column":39,"line":137},"start":{"column":12,"line":137}},"mutatorName":"BinaryExpression","replacement":"interval.start >= interval.end","status":"Survived"},{"id":"92","location":{"end":{"column":39,"line":137},"start":{"column":12,"line":137}},"mutatorName":"BinaryExpression","replacement":"interval.start <= interval.end","status":"Killed"},{"id":"93","location":{"end":{"column":10,"line":139},"start":{"column":40,"line":137}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"95","location":{"end":{"column":36,"line":142},"start":{"column":13,"line":142}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"97","location":{"end":{"column":10,"line":144},"start":{"column":38,"line":142}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"94","location":{"end":{"column":59,"line":138},"start":{"column":19,"line":138}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"96","location":{"end":{"column":36,"line":142},"start":{"column":13,"line":142}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"98","location":{"end":{"column":36,"line":146},"start":{"column":12,"line":146}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"99","location":{"end":{"column":36,"line":146},"start":{"column":12,"line":146}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"100","location":{"end":{"column":36,"line":146},"start":{"column":12,"line":146}},"mutatorName":"PrefixUnaryExpression","replacement":"this.overlaps(interval)","status":"Killed"},{"id":"103","location":{"end":{"column":63,"line":151},"start":{"column":34,"line":151}},"mutatorName":"BinaryExpression","replacement":"this.start !== startNewInterval","status":"Killed"},{"id":"104","location":{"end":{"column":63,"line":151},"start":{"column":34,"line":151}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"101","location":{"end":{"column":10,"line":149},"start":{"column":37,"line":146}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"102","location":{"end":{"column":10,"line":157},"start":{"column":16,"line":149}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"106","location":{"end":{"column":61,"line":154},"start":{"column":32,"line":154}},"mutatorName":"BinaryExpression","replacement":"startNewInterval !== this.start","status":"Killed"},{"id":"105","location":{"end":{"column":63,"line":151},"start":{"column":34,"line":151}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"108","location":{"end":{"column":61,"line":154},"start":{"column":32,"line":154}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"107","location":{"end":{"column":61,"line":154},"start":{"column":32,"line":154}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"}],"source":"class Interval {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end\n    }\n\n    toString() {\n        return \"[\" + this.start + \",\" + this.end + \"]\";\n    }\n\n    /**\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.overlaps(interval2) => true\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                       ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.overlaps(interval2) => false\n     *\n     * @param {Interval} interval\n     * @returns {boolean}\n     */\n    overlaps(interval) {\n        return this.end > interval.start && this.start < interval.end;\n    }\n\n    /**\n     * Retourne true si cet interval contient le paramètre interval\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.includes(interval2) => true\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                              ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.includes(interval2) => false\n     *\n     * @param {Interval} interval\n     * @returns {boolean}\n     */\n    includes(interval) {\n        return this.start < interval.start && this.start < interval.end && this.end > interval.start && this.end > interval.end\n    };\n\n    /**\n     * Retourne l'union de deux intervals\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n     *\n     * @param {Interval} interval\n     * @returns {Interval[]}\n     */\n    union(interval) {\n        let res = [];\n        if(this.overlaps(interval)){\n            let startNewInterval = this.start < interval.start?this.start:interval.start;\n            let endNewInterval = this.end > interval.end?this.end:interval.end;\n            res.push(new Interval(startNewInterval,endNewInterval));\n        }else {\n            if(this.end < interval.start) {\n                res.push(this);\n                res.push(interval);\n            } else {\n                res.push(interval);\n                res.push(this);\n            }\n        }\n        return res;\n    };\n\n    /**\n     * Retourne l'intersection de deux intervals\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.intersection(interval2) =>                     ▒▒▒▒▒\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.intersection(interval2) => <tableau vide>\n     *\n     * @param {Interval} interval\n     * @returns {Interval|null}\n     */\n    intersection(interval) {\n        if(typeof interval == \"undefined\"){\n            throw \"Le paramètre interval est undefined\";\n        }\n        if(interval.start>interval.end){\n            throw \"Le paramètre interval n'est pas valide\";\n        }\n\n        let res = [];\n        if(this.overlaps(interval)){\n            let startNewInterval = Math.max(this.start,interval.start);\n            let endNewINterval = Math.min(this.end, interval.end);\n            res.push(new Interval(startNewInterval,endNewINterval));\n        }\n        return res;\n    };\n\n    /**\n     * Retourne l'exclusion de deux intervals\n     *\n     * Exemple 1 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒     ▒▒▒▒▒▒▒▒\n     *\n     * Exemple 2 :\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n     *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\n     *\n     * @param {Interval} interval\n     * @returns {Interval[]}\n     */\n    exclusion(interval) {\n\n        if(typeof interval == \"undefined\"){\n            throw \"Le paramètre interval est undefined\";\n        }\n        if(interval.start>interval.end){\n            throw \"Le paramètre interval n'est pas valide\";\n        }\n\n        let res = [];\n        if (this.includes(interval)) {\n            return res;\n        }\n\n        if(!this.overlaps(interval)){\n            res.push(this);\n            res.push(interval);\n        } else {\n            let startNewInterval = Math.min(this.start,interval.start);\n            let endNewInterval = this.start===startNewInterval?interval.start:this.start;\n            res.push(new Interval(startNewInterval,endNewInterval));\n\n            startNewInterval = startNewInterval===this.start?this.end:interval.end;\n            endNewInterval = Math.max(this.end,interval.end);\n            res.push(new Interval(startNewInterval,endNewInterval));\n        }\n        return res;\n    };\n}\n\nmodule.exports = Interval;\n"},"/var/www/tp-jest/src/math.js":{"language":"javascript","mutants":[{"id":"111","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"110","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"109","location":{"end":{"column":2,"line":16},"start":{"column":25,"line":2}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"112","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"BinaryExpression","replacement":"n !== 0","status":"Killed"},{"id":"113","location":{"end":{"column":6,"line":5},"start":{"column":18,"line":3}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"114","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"116","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"BinaryExpression","replacement":"n > 3000","status":"Killed"},{"id":"115","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"119","location":{"end":{"column":28,"line":8},"start":{"column":15,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"117","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"BinaryExpression","replacement":"n < 3000","status":"Killed"},{"id":"122","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Survived"},{"id":"121","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"118","location":{"end":{"column":6,"line":9},"start":{"column":20,"line":7}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"120","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"123","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"125","location":{"end":{"column":30,"line":12},"start":{"column":15,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"124","location":{"end":{"column":6,"line":13},"start":{"column":16,"line":11}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"126","location":{"end":{"column":37,"line":15},"start":{"column":12,"line":15}},"mutatorName":"BinaryExpression","replacement":"n / Util.factorial(n - 1)","status":"Killed"},{"id":"127","location":{"end":{"column":36,"line":15},"start":{"column":31,"line":15}},"mutatorName":"BinaryExpression","replacement":"n + 1","status":"Killed"},{"id":"128","location":{"end":{"column":2,"line":37},"start":{"column":29,"line":26}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"130","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"129","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"131","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"BinaryExpression","replacement":"n === 1 && n === 0","status":"Killed"},{"id":"133","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"135","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"BinaryExpression","replacement":"n !== 0","status":"Killed"},{"id":"138","location":{"end":{"column":6,"line":29},"start":{"column":29,"line":27}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"134","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"137","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"132","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"BinaryExpression","replacement":"n !== 1","status":"Killed"},{"id":"136","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"139","location":{"end":{"column":21,"line":28},"start":{"column":16,"line":28}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"140","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"141","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"143","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"144","location":{"end":{"column":6,"line":32},"start":{"column":16,"line":30}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"142","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Survived"},{"id":"145","location":{"end":{"column":50,"line":31},"start":{"column":15,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"146","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"147","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"BinaryExpression","replacement":"i <= n","status":"Killed"},{"id":"148","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"BinaryExpression","replacement":"i >= n","status":"Killed"},{"id":"149","location":{"end":{"column":31,"line":33},"start":{"column":28,"line":33}},"mutatorName":"PostfixUnaryExpression","replacement":"i--","status":"Killed"},{"id":"150","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"152","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"BinaryExpression","replacement":"n % i !== 0","status":"Killed"},{"id":"151","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"153","location":{"end":{"column":18,"line":34},"start":{"column":13,"line":34}},"mutatorName":"BinaryExpression","replacement":"n * i","status":"Killed"},{"id":"154","location":{"end":{"column":38,"line":34},"start":{"column":33,"line":34}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"157","location":{"end":{"column":14,"line":50},"start":{"column":9,"line":50}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"156","location":{"end":{"column":2,"line":60},"start":{"column":30,"line":49}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"158","location":{"end":{"column":14,"line":50},"start":{"column":9,"line":50}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"155","location":{"end":{"column":16,"line":35},"start":{"column":12,"line":35}},"mutatorName":"BooleanSubstitution","replacement":"false","status":"Killed"},{"id":"160","location":{"end":{"column":14,"line":50},"start":{"column":9,"line":50}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"161","location":{"end":{"column":6,"line":52},"start":{"column":16,"line":50}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"159","location":{"end":{"column":14,"line":50},"start":{"column":9,"line":50}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Survived"},{"id":"162","location":{"end":{"column":53,"line":51},"start":{"column":15,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"164","location":{"end":{"column":26,"line":54},"start":{"column":21,"line":54}},"mutatorName":"BinaryExpression","replacement":"i <= n","status":"Survived"},{"id":"163","location":{"end":{"column":26,"line":54},"start":{"column":21,"line":54}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"165","location":{"end":{"column":26,"line":54},"start":{"column":21,"line":54}},"mutatorName":"BinaryExpression","replacement":"i >= n","status":"Killed"},{"id":"168","location":{"end":{"column":28,"line":55},"start":{"column":13,"line":55}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"167","location":{"end":{"column":6,"line":58},"start":{"column":33,"line":54}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"166","location":{"end":{"column":31,"line":54},"start":{"column":28,"line":54}},"mutatorName":"PostfixUnaryExpression","replacement":"i--","status":"Killed"},{"id":"169","location":{"end":{"column":28,"line":55},"start":{"column":13,"line":55}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"171","location":{"end":{"column":2,"line":84},"start":{"column":30,"line":74}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"170","location":{"end":{"column":10,"line":57},"start":{"column":30,"line":55}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"173","location":{"end":{"column":15,"line":75},"start":{"column":9,"line":75}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"172","location":{"end":{"column":15,"line":75},"start":{"column":9,"line":75}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"176","location":{"end":{"column":71,"line":75},"start":{"column":23,"line":75}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"177","location":{"end":{"column":27,"line":77},"start":{"column":21,"line":77}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"174","location":{"end":{"column":15,"line":75},"start":{"column":9,"line":75}},"mutatorName":"BinaryExpression","replacement":"n < 0","status":"Killed"},{"id":"175","location":{"end":{"column":15,"line":75},"start":{"column":9,"line":75}},"mutatorName":"BinaryExpression","replacement":"n > 0","status":"Killed"},{"id":"179","location":{"end":{"column":27,"line":77},"start":{"column":21,"line":77}},"mutatorName":"BinaryExpression","replacement":"i > n","status":"Killed"},{"id":"181","location":{"end":{"column":6,"line":82},"start":{"column":34,"line":77}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"178","location":{"end":{"column":27,"line":77},"start":{"column":21,"line":77}},"mutatorName":"BinaryExpression","replacement":"i < n","status":"Killed"},{"id":"182","location":{"end":{"column":27,"line":78},"start":{"column":13,"line":78}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"183","location":{"end":{"column":27,"line":78},"start":{"column":13,"line":78}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"184","location":{"end":{"column":27,"line":78},"start":{"column":13,"line":78}},"mutatorName":"BinaryExpression","replacement":"i % 15 !== 0","status":"Killed"},{"id":"185","location":{"end":{"column":20,"line":78},"start":{"column":14,"line":78}},"mutatorName":"BinaryExpression","replacement":"i * 15","status":"Killed"},{"id":"186","location":{"end":{"column":51,"line":78},"start":{"column":41,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"187","location":{"end":{"column":31,"line":79},"start":{"column":18,"line":79}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"188","location":{"end":{"column":31,"line":79},"start":{"column":18,"line":79}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"189","location":{"end":{"column":31,"line":79},"start":{"column":18,"line":79}},"mutatorName":"BinaryExpression","replacement":"i % 5 !== 0","status":"Killed"},{"id":"190","location":{"end":{"column":24,"line":79},"start":{"column":19,"line":79}},"mutatorName":"BinaryExpression","replacement":"i * 5","status":"Killed"},{"id":"191","location":{"end":{"column":51,"line":79},"start":{"column":45,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"193","location":{"end":{"column":31,"line":80},"start":{"column":18,"line":80}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"192","location":{"end":{"column":31,"line":80},"start":{"column":18,"line":80}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"195","location":{"end":{"column":24,"line":80},"start":{"column":19,"line":80}},"mutatorName":"BinaryExpression","replacement":"i * 3","status":"Killed"},{"id":"196","location":{"end":{"column":51,"line":80},"start":{"column":45,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"198","location":{"end":{"column":28,"line":96},"start":{"column":9,"line":96}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"197","location":{"end":{"column":2,"line":113},"start":{"column":33,"line":95}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"194","location":{"end":{"column":31,"line":80},"start":{"column":18,"line":80}},"mutatorName":"BinaryExpression","replacement":"i % 3 !== 0","status":"Killed"},{"id":"199","location":{"end":{"column":28,"line":96},"start":{"column":9,"line":96}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"201","location":{"end":{"column":56,"line":96},"start":{"column":36,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"200","location":{"end":{"column":28,"line":96},"start":{"column":9,"line":96}},"mutatorName":"BinaryExpression","replacement":"phrase.length !== 0","status":"Killed"},{"id":"202","location":{"end":{"column":29,"line":98},"start":{"column":9,"line":98}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"203","location":{"end":{"column":29,"line":98},"start":{"column":9,"line":98}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"205","location":{"end":{"column":20,"line":100},"start":{"column":18,"line":100}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"206","location":{"end":{"column":6,"line":109},"start":{"column":39,"line":102}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"207","location":{"end":{"column":34,"line":103},"start":{"column":13,"line":103}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"208","location":{"end":{"column":34,"line":103},"start":{"column":13,"line":103}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"204","location":{"end":{"column":77,"line":98},"start":{"column":37,"line":98}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"209","location":{"end":{"column":34,"line":103},"start":{"column":13,"line":103}},"mutatorName":"BinaryExpression","replacement":"phraseElement !== \"Z\"","status":"Killed"},{"id":"210","location":{"end":{"column":34,"line":103},"start":{"column":31,"line":103}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"211","location":{"end":{"column":49,"line":103},"start":{"column":46,"line":103}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"212","location":{"end":{"column":39,"line":104},"start":{"column":18,"line":104}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"213","location":{"end":{"column":39,"line":104},"start":{"column":18,"line":104}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"214","location":{"end":{"column":39,"line":104},"start":{"column":18,"line":104}},"mutatorName":"BinaryExpression","replacement":"phraseElement !== \"z\"","status":"Killed"},{"id":"215","location":{"end":{"column":39,"line":104},"start":{"column":36,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"216","location":{"end":{"column":54,"line":104},"start":{"column":51,"line":104}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"218","location":{"end":{"column":39,"line":105},"start":{"column":18,"line":105}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"217","location":{"end":{"column":39,"line":105},"start":{"column":18,"line":105}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"219","location":{"end":{"column":39,"line":105},"start":{"column":18,"line":105}},"mutatorName":"BinaryExpression","replacement":"phraseElement !== \" \"","status":"Killed"},{"id":"221","location":{"end":{"column":10,"line":108},"start":{"column":14,"line":106}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"220","location":{"end":{"column":39,"line":105},"start":{"column":36,"line":105}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"222","location":{"end":{"column":74,"line":107},"start":{"column":43,"line":107}},"mutatorName":"BinaryExpression","replacement":"phraseElement.charCodeAt(0) - 1","status":"Killed"},{"id":"180","location":{"end":{"column":32,"line":77},"start":{"column":29,"line":77}},"mutatorName":"PostfixUnaryExpression","replacement":"i--","status":"Timeout"}],"source":"let Util = {};\nUtil.factorial = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n\n    if (n >= 3000) {\n        throw 'n too large'\n    }\n\n    if (n < 0) {\n        throw 'n is negative'\n    }\n\n    return n * Util.factorial(n - 1);\n};\n\n/**\n * Détermine si n est un nombre premier.\n * Util.isPrime(5) => false\n * Util.isPrime(6) => true\n *\n * @param {number} n\n * @returns {boolean}\n */\nUtil.isPrime = function (n) {\n    if (n === 1 || n === 0) {\n        return false;\n    }\n    if (n < 0) {\n        throw 'Unable to compute prime for n < 0'\n    }\n    for (let i = 2; i < n; i++)\n        if (n % i === 0) return false;\n    return true;\n\n};\n\n\n/**\n * Additionne l'ensemble des nombres premiers de 2 à n\n *\n * Util.sumPrime(6) = 2 + 3 + 5 = 10\n * Util.sumPrime(8) = 2 + 3 + 5 + 7 = 17\n *\n * @param {number} n\n * @returns {number}\n */\nUtil.sumPrime = function (n) {\n    if (n < 0) {\n        throw 'Unable to compute sumprime for n < 0'\n    }\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        if (Util.isPrime(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n};\n\n/**\n * Cette méthode doit retourner un tableau de 1 à n tel que:\n * - Pour les nombres multiples de 3, les remplacer par \"Fizz\"\n * - Pour les nombres multiples de 5, les remplacer par \"Buzz\"\n * - Pour les nombres multiples de 3 et 5, les remplacer par \"FizzBuzz\"\n *\n * Exp :\n * Util.fizzBuzz(15) => [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n *\n * @param {number} n\n * @returns {array}\n */\nUtil.fizzBuzz = function (n) {\n    if (n <= 0) throw \"Le nombre ne respecte pas les données d'entres\";\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if ((i % 15) === 0) result.push(\"FizzBuzz\");\n        else if ((i % 5) === 0) result.push(\"Buzz\");\n        else if ((i % 3) === 0) result.push(\"Fizz\");\n        else result.push(i);\n    }\n    return result;\n};\n\n/**\n * Chiffre une phrase selon la règle suivante : Les A deviennent des B, les B des C, etc.\n *\n * Exp :\n * Util.cipher(\"Test Unitaire\") => \"Uftu Vojubjsf\"\n *\n * @param phrase\n * @returns {string}\n */\nUtil.cipher = function (phrase) {\n    if (phrase.length === 0) throw \"La chaine est vide\";\n\n    if (/[1-9]/.test(phrase)) throw \"Cette fonction ne gere pas les nombres\";\n\n    let result = \"\";\n\n    for (let phraseElement of phrase) {\n        if (phraseElement === \"Z\") result += \"A\";\n        else if (phraseElement === \"z\") result += \"a\";\n        else if (phraseElement === \" \") result += phraseElement;\n        else {\n            result += String.fromCharCode(phraseElement.charCodeAt(0) + 1);\n        }\n    }\n\n    return result;\n\n};\n\n\nmodule.exports = Util;\n\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};